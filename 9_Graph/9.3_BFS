#include <iostream>
#include <vector>
#include <queue>

using namespace std;
typedef pair<int, int> Pair;
void BFS(const vector<vector<Pair>>& graph, int V)
{
    vector<bool> visited(V, false);
    vector<int> parent(V, -1);

    queue<int> q;
    //assume start is 0;
    int start = 0;
    q.push(start);
    visited[start] = true;
    while(!q.empty())
    {
        int curr = q.front();
        q.pop();

        for(Pair next : graph[curr])
        {
            int u = next.first;
            if(!visited[u])
            {
                q.push(u);
                visited[u] = true;
                parent[u] = curr;
            }
        }
    }
}
int main()
{
    int V = 4;
    vector<vector<Pair>> graph(V);

    graph[0].push_back({2, 1});
    graph[1].push_back({3, 2});
    graph[2].push_back({3, 3});
    graph[0].push_back({1, 4});

    graph[2].push_back({0, 1});
    graph[3].push_back({1, 2});
    graph[3].push_back({2, 3});
    graph[1].push_back({0, 4});
    BFS(graph, V);
    return 0;
}
