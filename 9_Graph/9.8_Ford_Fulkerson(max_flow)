//Ford-Fulkerson algorithm to find max flow
#include <iostream>
#include <vector>
#include <queue>
using namespace std;
bool bfs_op(const vector<vector<int>>& r_graph, vector<int>& parent, int s, int t, int n)
{
    vector<int> visited(n, false);
    queue<int> q;
    //start from s(source) and end at t(sink)
    parent[s] = -1;
    q.push(s);
    visited[s] = true;
    while(!q.empty())
    {
        int u = q.front();
        q.pop();
        for(int v = 0; v < n; v++)
        {
            if(!visited[v] && r_graph[u][v] > 0)
            {
                if(v == t)
                {
                    parent[v] = u;
                    visited[v] = true;
                    return true;
                }
                parent[v] = u;
                q.push(v);
                visited[v] = true;
            }
        }
    }
    //visited[t] == false
    return false;
}

int ford_fulkersonAlg(const vector<vector<int>>& adj, int s, int t, int n)
{
    int max_flow = 0;
    //build residual graph : adjacency matrix
    vector<vector<int>> r_graph = adj;
    vector<int> parent(n, -1);  // This array is filled by BFS and to
                                // store path
    while(bfs_op(r_graph, parent, s, t, n))//while exist pat from s->t
    {
        //find path and in the its path we need find min capacity of edge . This is flow can throw its path
        int u, v, path_flow = INT_MAX;
        for (v = t; v != s; v = parent[v])
        {
            u = parent[v];
            path_flow = min(path_flow, r_graph[u][v]);
        }
        //update max_flow
        max_flow += path_flow;
        //update residual graph
        for (v = t; v != s; v = parent[v])
        {
            u = parent[v];
            r_graph[u][v] -= path_flow;
            r_graph[v][u] += path_flow;
        }
    }
    return max_flow;
}
int main()
{
    vector<vector<int>> adj = { {0, 2, 1, 0},
                                {0, 0, 2, 3},
                                {0, 0, 0, 2},
                                {0, 0, 0, 0},
                                };
    int s, t, n;
    s = 0; t = 3; n = 4;
    int max_flow = ford_fulkersonAlg(adj, s, t, n);
    cout << max_flow;
    return 0;
}
