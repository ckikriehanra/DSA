#include <iostream>
#include <unordered_map>
using namespace std;
int Find_subarray_having_sum_k(int* arr, int size, int k)
{
    //map is saved key: sum and value is numbers occur
    unordered_map<int, int> prevSum;
    //currsum is saved sum so far
    int count = 0, currsum = 0;
    for(int i = 0; i < size; i++)
    {
        currsum += arr[i];
        if(currsum == k)
            count ++;
        if(currsum > k)
        {
            if(prevSum.find(currsum - k) != prevSum.end())
                count += prevSum[currsum - k];
        }
        prevSum[currsum] ++;
    }
    return count;
}
int main()
{
    int arr[] = {1, 2, 4, 3, 5, 6, 10};
    int size = sizeof(arr) / sizeof(int);
    int k;
    cin >> k;
    cout << Find_subarray_having_sum_k(int* arr, int size, k);

    return 0;
}
