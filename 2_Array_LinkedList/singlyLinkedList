#include <iostream>

using namespace std;
class Node
{
private:
    int data;
public:
    Node* next;
    int getData()
    {
        return data;
    }
    Node(int new_data)
    {
        data = new_data;
        next = NULL;
    }
    Node()
    {
        next = NULL;
    }
};
class LinkedList
{
private:
    Node* head = new Node;
public:
    LinkedList(){head = NULL;}

    void push(int new_data)
    {
        if(head == NULL)
        {
            head = new Node(new_data);
            return;
        }
        Node* temp = head;
        while(temp->next != NULL)
        {
            temp = temp->next;
        }
        temp->next = new Node(new_data);
    }

    void pop(int position)
    {
        if(head == NULL)
            cout << "EMPTY";
        Node* temp = head;

        //delete first Node in list
        if(position == 0)
        {
            head = head->next;
            delete temp;
            return;
        }

        //find Node before Node need erase
        for(int i = 0; i < position-1; i++)
        {
            temp = temp->next;
        }
        Node* temp2 = temp->next;
        temp->next = temp->next->next;
        delete temp2;
    }

    int getSize()
    {
        int count = 0;
        Node* temp = head;
        while(temp != NULL)
        {
            count ++;
            temp = temp->next;
        }
        return count;
    }

    void printOut()
    {
        Node* temp = head;
        while(temp != NULL)
        {
            cout << temp->getData() << ' ';
            temp = temp->next;
        }
    }

};
int main()
{
    LinkedList List;
    List.push(10);
    List.push(20);
    List.push(30);
    List.push(40);
    List.pop(1);
    List.printOut();
    //cout << List.getSize();

    return 0;
}
