#include <iostream>
#include <vector>
using namespace std;

class PQ
{
	public:
		vector<int> arr;
		PQ(){}

		void Swap(int& x, int& y){
			int temp = x;
			x = y;
			y = temp;
		}

		void swim(int index)
		{
            int i, j;
            i = v.size() - 1;
            j = i;
            while(j > 0)//check is parent
            {
                j = (j - 1) / 2;
                if(v[i] < v[j])//parent greater than child so swap
                {
                    swap(v[i], v[j]);
                    i = j;
                }
            }
		}


		void Insert(int value){
			//lay size cua vector
			int temp = arr.size();
			//chen value vao vector
			arr.push_back(value);
			//swim
			swim(temp);
		}

		void sink(int index){
			int temp = arr.size();
			while(index*2 + 1 < temp){
				//chac chan ton tai 1 con
				int left = index*2 + 1;
				//kiem tra xem co con thu 2 khong
				if(left+1 < temp){
					if(arr[left] > arr[left+1]){
						left++;
					}
				}
				if(arr[left] < arr[index])
                    Swap(arr[left], arr[index]);
				//update vi tri cua index
				index = left;
			}
		}

		void Remove(){
			//lay size cua arr
			int temp = arr.size();
			//thay gia tri tai min value bang gia tri o cuoi vector
			arr[0] = arr[temp-1];
			//xoa gia tri o cuoi vector
			arr.pop_back();
			//duy tri ket cau dung cho cay (day gia tri xuong dung cho)
			sink(0);
		}

        int Size()
        {
            return arr.size();
        }

		void display(){
			for(int i = 0; i < arr.size(); i++){
				cout << arr[i] << " ";
			}
		}
		void heapSort(vector<int>& aux)
		{
            int i = arr.size() - 1;
            while (i >= 0)
            {
                aux[i] = arr[0];
                Remove();
                sink(0);
                i--;
            }
		}
};
int main(){
	PQ priority_Queue;
	priority_Queue.Insert(20);
	priority_Queue.Insert(5);
	priority_Queue.Insert(90);
	priority_Queue.Insert(80);
    priority_Queue.Insert(100);
    priority_Queue.Insert(0);
    priority_Queue.Insert(-22);
    priority_Queue.display();
    cout << endl;
    vector<int> aux(priority_Queue.Size());
    priority_Queue.heapSort(aux);
    for(int num : aux)
        cout << num << ' ';
    cout << endl;
//	cout << endl;
//	priority_Queue.Remove();
//	priority_Queue.display();
//	cout << endl;
//	priority_Queue.Remove();
//	priority_Queue.display();
	return 0;
}
