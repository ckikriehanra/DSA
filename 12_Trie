//Trie data structure

#include <iostream>
#include <string>
using namespace std;

// Alphabet size (# of symbols)
#define ALPHABET_SIZE (26)

// Converts key current character into index
// use only 'a' through 'z' and lower case
#define CHAR_TO_INDEX(c) ((int)c - (int)'a')
class Node
{
public:
    char data;
    int word_end;
    int pc;//prefix count
    Node* child[26];
    Node()
    {
        word_end = 0;
        pc = 0;
        for(auto& x : child)
            x = nullptr;
    }
    Node(char d)
    {
        data = d;
        word_end = 0;
        pc = 0;
        for(auto& x : child)
            x = nullptr;
    }
};
class Trie
{
private:
    Node* root = new Node;

    // Recursive function to print auto-suggestions for given
    // node.
    void suggestionsRec(Node* curr, string& currPrefix)
    {
        // found a string in Trie with the given prefix
        if (curr->word_end)
        {
            cout << currPrefix << endl;
        }

        // All child of current node pointers are NULL
        if (isLastNode(curr))
        {
            currPrefix.pop_back();
            return;
        }

        for (int i = 0; i < ALPHABET_SIZE; i++)
        {
            if (curr->child[i])
            {
                // append current character to current Prefix string
                currPrefix.push_back(97 + i);

                // recur over the rest
                suggestionsRec(curr->child[i], currPrefix);
            }
        }
        currPrefix.pop_back();
    }
public:
    //insert and find function
    void insert_op(string s)
    {
        Node* curr = root;
        int index;
        for(char c : s)
        {
            index = c - 'a';
            if(curr->child[index] == nullptr)
                curr->child[index] = new Node(c);
            curr = curr->child[index];
            curr->pc ++;
        }
        curr->word_end ++;
    }

    bool find_op(string s)
    {
        Node* curr = root;
        int index;
        for(char c : s)
        {
            index = c - 'a';
            if(curr->child[index] == nullptr)
                return false;
            curr = curr->child[index];
        }
        if(curr->word_end > 0)
            return true;
        return false;
    }

    //delete one word but if has many the same word we only decrease count by 1
    void delete_op(string s)
    {
        Node* curr = root;
        int index;
        for(char c : s)
        {
            index = c - 'a';
            if(curr->child[index] == nullptr)
                return;
            curr = curr->child[index];
        }
        curr->word_end--;
    }

    int prefixCount(string s)
    {
        Node* curr = root;
        int index;
        for(char c : s)
        {
            index = c - 'a';
            if(curr->child[index] == nullptr)
                return 0;
            curr = curr->child[index];
        }
        return curr->pc;
    }

    // Returns 0 if current node has a child
    // If all child are NULL, return 1.
    bool isLastNode( Node* root)
    {
        for (int i = 0; i < ALPHABET_SIZE; i++)
            if (root->child[i])
                return 0;
        return 1;
    }

    void suggestionsRec(string query)
    {
        suggestionsRec(root, query);
    }
    int printAutoSuggestions(const string query)
    {
        Node* curr = root;

        // Check if prefix is present and find the
        // the node (of last level) with last character
        // of given string.
        for (char c : query)
        {
            int index = CHAR_TO_INDEX(c);

            // no string in the Trie has this prefix
            if (!curr->child[index])
                return 0;

            curr = curr->child[index];
        }

        // If prefix is present as a word.
        bool isWord = (curr->word_end > 0);

        // If prefix is last node of tree (has no
        // child)
        bool isLast = isLastNode(curr);

        // If prefix is present as a word, but
        // there is no subtree below the last
        // matching node.
        if (isWord && isLast)
        {
            cout << query << endl;
            return -1;
        }

        // If there are are nodes below last
        // matching character.
        if (!isLast)
        {
            string prefix = query;
            suggestionsRec(curr, prefix);
            return 1;
        }
    }
};
int main()
{
    Trie var;
    var.insert_op("hello");
	var.insert_op("dog");
	var.insert_op("hell");
	var.insert_op("cat");
	var.insert_op("a");
	var.insert_op("hel");
	var.insert_op("help");
	var.insert_op("helps");
	var.insert_op("helping");
////    var.delete_op("b");
//    if(var.find_op("helping"))
//        cout << "YES";
//    else
//        cout << "NO";
//    cout << var.prefixCount("c");
    int comp = var.printAutoSuggestions("hel");

	if (comp == -1)
		cout << "No other strings found with this prefix\n";

	else if (comp == 0)
		cout << "No string found with this prefix\n";
    return 0;
}
